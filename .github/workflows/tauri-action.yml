name: 'publish'

on:
  push:
    branches:
      - release

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      - name: Install pnpm
        run: npm install -g pnpm

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || (matrix.platform == 'windows-latest' && 'x86_64-pc-windows-gnu' || '') }}
          
      # - name: Install and set rust toolchain to gnu
      #   if: matrix.platform == 'windows-latest'
      #   run: |
      #     rustup toolchain install stable-x86_64-pc-windows-gnu
      #     rustup default stable-x86_64-pc-windows-gnu

      - name: Install GStreamer dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libunwind-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio libglib2.0-dev pkg-config
          
      - name: Install GStreamer dependencies (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          brew update
          brew install gstreamer gst-plugins-base pkg-config glib
          
      - name: Get macOS SDK sysroot (macOS only)
        if: matrix.platform == 'macos-latest'
        shell: bash
        id: xcrun
        run: echo "SYSROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV

      - name: Set up MSYS2 (Windows only)
        if: matrix.platform == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          location: D:\
          update: true
          install: >-
            pkg-config mingw-w64-x86_64-gstreamer mingw-w64-x86_64-glib2 mingw-w64-x86_64-gtk3
          msystem: MINGW64

      - name: Get msys2 path
        if: matrix.platform == 'windows-latest'
        shell: pwsh 
        run: | 
          $msys2Root = msys2 -c 'cygpath -m /' 
          echo "MSYS2_ROOT=$msys2Root" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Display msys2_root variable
        if: matrix.platform == 'windows-latest'
        run: echo $env:MSYS2_ROOT
        shell: pwsh

      - name: Set up MSYS2 path
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: echo "${MSYS2_ROOT}usr/bin" >> "$GITHUB_PATH"

      - name: Set up MSYS2 path (other)
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: echo "${MSYS2_ROOT}mingw64/bin" >> "$GITHUB_PATH"

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: pnpm install # change this to npm, pnpm or bun depending on which one you use.

      - name: Display PATH variable
        if: matrix.platform == 'windows-latest'
        run: echo $env:PATH
        shell: pwsh

      - name: Set up environment variables for Windows
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          echo PKG_CONFIG_PATH=/d/msys64/mingw64/lib/pkgconfig >> $GITHUB_ENV
          echo LIBRARY_PATH=D:/msys64/mingw64/lib >> $GITHUB_ENV
          echo LD_LIBRARY_PATH=D:/msys64/mingw64/lib >> $GITHUB_ENV
          echo C_INCLUDE_PATH=D:/msys64/mingw64/include >> $GITHUB_ENV
          echo CPLUS_INCLUDE_PATH=D:/msys64/mingw64/include >> $GITHUB_ENV

      - name: Set up environment variables for macOS
        if: matrix.platform == 'macos-latestnot'
        shell: bash
        run: |
          echo PKG_CONFIG_SYSROOT_DIR=${{ env.SYSROOT }} >> $GITHUB_ENV

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
